{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of the service (used for app.kubernetes.io/name label)"
    },
    "fullname": {
      "type": "string",
      "description": "The name of the service instance (used for resource names and app.kubernetes.io/instance label)"
    },
    "image": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string",
          "default": "docker.io",
          "description": "The Registry containing the Docker Image to run (also used as the name of an optional Image Pull Secret)"
        },
        "repository": {
          "type": "string",
          "description": "The name of the Docker Image image to run (without the Registry)"
        },
        "tag": {
          "type": "string",
          "description": "The tag of the Docker Image to run (also used for app.kubernetes.io/version label)"
        },
        "pullPolicy": {
          "type": "string",
          "enum": ["Never", "IfNotPresent", "Always"],
          "default": "IfNotPresent",
          "description": "Set to Always to try to pull new versions of the Docker Image"
        },
        "pullSecret": {
          "type": "string",
          "description": "Name of the Kubernetes Secret providing credentials for pulling the Image"
        }
      },
      "required": [
        "repository",
        "tag"
      ]
    },
    "securityContext": {
      "type": "object",
      "description": "Security context to use for running containers",
      "properties": {
        "runAsUser": {"type": "integer"},
        "runAsGroup": {"type": "integer"},
        "fsGroup": {"type": "integer"}
      }
    },
    "command": {
      "type": "array",
      "items": [{"type": "string"}],
      "description": "Overrides the command to launch in the Docker Image"
    },
    "args": {
      "type": "array",
      "items": [{"type": "string"}],
      "description": "The command-line arguments passed to the service"
    },
    "env": {
      "type": "object",
      "additionalProperties": {"type": "string"},
      "description": "The environment variables passed to the service"
    },
    "config": {
      "type": "object",
      "description": "YAML/JSON configuration to be mounted as a file in the container"
    },
    "configMountPath": {
      "type": "string",
      "default": "/config/config.yaml",
      "description": "The file path in the container to mount the data from config into (exposed via $CONFIG_FILE)"
    },
    "additionalConfigs": {
      "type": "array",
      "items": [{"type": "string"}],
      "description": "Additional ConfigMaps with key named data.yaml to be mounted (paths appended to $CONFIG_FILE)"
    },
    "livenessProbe": {
      "type": "object",
      "description": "Probe that causes the service to be restarted when failing",
      "properties": {
        "initialDelaySeconds": {"type": "integer"},
        "periodSeconds": {"type": "integer"},
        "httpGet": {
          "type": "object",
          "properties": {
            "port": {"type": "string"},
            "path": {"type": "string"}
          }
        },
        "exec": {
          "type": "object",
          "properties": {
            "command": {
              "type": "array",
              "items": [{"type": "string"}]
            }
          }
        }
      }
    },
    "readinessProbe": {
      "type": "object",
      "description": "Probe that prevents the service from receiving traffic when failing",
      "properties": {
        "initialDelaySeconds": {"type": "integer"},
        "periodSeconds": {"type": "integer"},
        "httpGet": {
          "type": "object",
          "properties": {
            "port": {"type": "string"},
            "path": {"type": "string"}
          }
        },
        "exec": {
          "type": "object",
          "properties": {
            "command": {
              "type": "array",
              "items": [{"type": "string"}]
            }
          }
        }
      }
    },
    "labels": {
      "type": "object",
      "additionalProperties": {"type": "string"},
      "description": "Additional labels to set on all generated resources"
    },
    "annotations": {
      "type": "object",
      "additionalProperties": {"type": "string"},
      "description": "Additional annotations to set on the Pods"
    },
    "resources": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "object",
          "properties": {
            "memory": {
              "type": "string",
              "default": "64M",
              "description": "The amount of memory requested for the service (recommendation: slightly higher than average usage)"
            },
            "cpu": {
              "type": "string",
              "default": "10m",
              "description": "The number of CPU cores requested for the service"
            }
          }
        },
        "limits": {
          "type": "object",
          "properties": {
            "memory": {
              "type": "string",
              "default": "96Mi",
              "description": "The maximum amount of memory the service may use (recommendation: slightly higher than worst-case usage)"
            },
            "cpu": {
              "type": "string",
              "default": "2000m",
              "description": "The maximum number of CPU cores the service may use"
            }
          }
        }
      }
    },
    "controller": {
      "type": "string",
      "enum": ["Deployment", "StatefulSet", "DaemonSet"],
      "default": "Deployment",
      "description": "The type of Pod controller to create"
    },
    "replicas": {
      "type": "integer",
      "default": 1,
      "description": "The number of instances of the service to run (set at least 2 for Pod Disruption Budget)"
    },
    "autoscaling": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables automatic starting of additional instances based on CPU load"
        },
        "maxReplicas": {
          "type": "integer",
          "default": 3,
          "description": "The maximum number of instances to run (must be larger than replicas)"
        },
        "targetCpu": {
          "type": "integer",
          "default": 80,
          "description": "The desired average CPU load in percent"
        }
      }
    },
    "rollingUpdate": {
      "type": "boolean",
      "default": true,
      "description": "Old and new versions may coexist (manual Pod deletion when this is false and strategy is not Deployment)"
    },
    "nodeSelector": {
      "type": "object",
      "additionalProperties": {"type": "string"},
      "description": "Node labels required for scheduling this service, also used as tolerations"
    },
    "persistence": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables persistent storage for the service"
        },
        "storageClass": {
          "type": "string",
          "description": "The type of disk to use for storage instead of the cluster default"
        },
        "accessModes": {
          "type": "array",
          "default": ["ReadWriteOnce"],
          "items": [{"type": "string"}],
          "description": "The support access modes the volume can be mounted with"
        },
        "size": {
          "type": "string",
          "default": "1G",
          "description": "The size of the persistent volume to create for the service"
        },
        "mountPath": {
          "type": "string",
          "description": "The mount path for the storage inside the container"
        }
      }
    },
    "secrets": {
      "type": "array",
      "items": [
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the Kubernetes Secret"
            },
            "subPath": {
              "type": "string",
              "description": "The path of a single file in the Secret"
            },
            "mountPath": {
              "type": "string",
              "description": "The mount path for the Secret inside the container"
            },
            "files": {
              "type": "object",
              "additionalProperties": {"type": "string"},
              "description": "Map of file names to base64-encoded content; leave empty to reference existing Secret"
            }
          },
          "required": [
            "name",
            "mountPath"
          ]
        }
      ]
    },
    "ingress": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables ingress into the service (either cluster-internal or public)"
        },
        "port": {
          "type": "integer",
          "default": 80,
          "description": "The container port ingress traffic is routed to"
        },
        "protocol": {
          "type": "string",
          "default": "http",
          "description": "The protocol used for ingress (e.g., http or grpc)"
        },
        "headless": {
          "type": "boolean",
          "default": false,
          "description": "Creates a headless Service to disable Kubernetes-based load balancing"
        },
        "domains": {
          "type": "array",
          "items": [{"type": "string"}],
          "description": "The public domain names under which the service is exposed (leave empty for cluster-internal only)"
        },
        "paths": {
          "type": "array",
          "items": [{"type": "string"}],
          "description": "HTTP path prefixes to accept ingress traffic for (leave empty to accept traffic for any path)"
        },
        "class": {
          "type": "string",
          "description": "The ingress controller to use (not applicable if ingress.istio.enabled)"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {"type": "string"},
          "description": "Annotations for Ingress resource (not applicable if ingress.istio.enabled)"
        },
        "tlsSecret": {
          "type": "string",
          "description": "The name of the Secret holding the TLS private key (not applicable if ingress.istio.enabled)"
        },
        "istio": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false,
              "description": "Use Istio VirtualService instead of Kubernetes Ingress resource"
            },
            "gateways": {
              "type": "array",
              "items": [{"type": "string"}],
              "description": "The names of the Istio Gateways to use"
            },
            "httpHeaders": {
              "type": "object",
              "additionalProperties": {"type": "string"},
              "description": "Custom HTTP response headers"
            },
            "corsPolicy": {
              "type": "object",
              "description": "Istio CORS policy (see https://istio.io/docs/reference/config/networking/virtual-service/#CorsPolicy)"
            },
            "timeout": {
              "type": "string",
              "default": "15s",
              "description": "Istio timeout (see https://istio.io/docs/tasks/traffic-management/request-timeouts/)"
            },
            "retries": {
              "type": "object",
              "description": "Istio retry policy (see https://istio.io/docs/reference/config/networking/virtual-service/#HTTPRetry)"
            }
          }
        }
      }
    },
    "netpol": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Apply network policies for the Pods"
        },
        "ingress": {
          "type": "array",
          "items": [{"type": "object"}],
          "description": "Ingress network policy rules to apply"
        },
        "egress": {
          "type": "array",
          "items": [{"type": "object"}],
          "description": "Ingress network policy rules to apply"
        }
      }
    },
    "canary": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Use Flagger for canary rollouts"
        },
        "analysis": {
          "type": "object",
          "description": "Configuration for canary analysis",
          "properties": {
            "interval": {
              "type": "string",
              "default": "10s"
            },
            "threshold": {
              "type": "integer",
              "default": 5
            },
            "maxWeight": {
              "type": "integer",
              "default": 50
            },
            "stepWeight": {
              "type": "integer",
              "default": 10
            },
            "metrics": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "name": {"type": "string"},
                    "threshold": {"type": "integer"},
                    "interval": {"type": "string"}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "tracing": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables tracing with Jaeger agent (injected as sidecar)"
        },
        "probability": {
          "type": "integer",
          "default": 1.0,
          "description": "Probability of any single trace being sampled; can be overridden for incoming requests e.g. via Istio"
        }
      }
    },
    "monitoring": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Use Prometheus for monitoring / metrics scraping"
        },
        "port": {
          "type": "integer",
          "default": 9100,
          "description": "The port to be scraped for monitoring data"
        },
        "path": {
          "type": "string",
          "default": "/metrics",
          "description": "The path to be scraped for monitoring data"
        },
        "interval": {
          "type": "string",
          "default": "1m",
          "description": "The interval at which monitoring data is scraped"
        }
      }
    },
    "alerting": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Deploys Prometheus alert rule for issues like like unavailable pods or high memory use"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {"type": "string"},
          "description": "Labels to apply to generic alert rules in addition to component and severity"
        },
        "memoryUsage": {
          "type": "object",
          "properties": {
            "thresholdFactor": {
              "type": "number",
              "default": "0.9",
              "description": "The maximum usage factor of resources.limits.memory allowed before alerting (between 0 and 1)"
            }
          }
        },
        "http4xxRatio": {
          "type": "object",
          "properties": {
            "sampleInterval": {
              "type": "string",
              "default": "5m",
              "description": "The time interval in which to measure ratio of HTTP 4xx responses for the current state"
            },
            "referenceInterval": {
              "type": "string",
              "default": "1d",
              "description": "The time interval in which to measure ratio of HTTP 4xx responses as a reference for the normal state"
            },
            "thresholdFactor": {
              "type": "number",
              "default": "1.5",
              "description": "The maximum factor between the current state and the normal state of HTTP 4xx response ratio allowed"
            }
          }
        },
        "responseTime": {
          "type": "object",
          "properties": {
            "sampleInterval": {
              "type": "string",
              "default": "1h",
              "description": "The time interval in which to measure average HTTP response times for the current state"
            },
            "referenceInterval": {
              "type": "string",
              "default": "1d",
              "description": "The time interval in which to measure average HTTP response times for the normal state"
            },
            "thresholdFactor": {
              "type": "number",
              "default": "1.5",
              "description": "The maximum factor between the current state and the normal state of HTTP response times allowed"
            }
          }
        }
      }
    },
    "sidecars": {
      "type": "array",
      "items": [{"type": "object"}],
      "description": "Additional sidecar containers to be added to the Pod"
    },
    "rbac": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": [{"type": "string"}],
          "description": "Namespace-specific Kubernetes RBAC Roles to assign to the service"
        },
        "clusterRoles": {
          "type": "array",
          "items": [{"type": "string"}],
          "description": "Cluster-wide Kubernetes RBAC Roles to assign to the service"
        }
      }
    }
  },
  "required": [
    "image"
  ]
}
