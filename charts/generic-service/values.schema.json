{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of the service (used for app.kubernetes.io/name label)"
    },
    "fullname": {
      "type": "string",
      "description": "The name of the service instance (used for resource names and app.kubernetes.io/instance label)"
    },
    "image": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string",
          "default": "docker.io",
          "description": "The Registry containing the Docker Image to run (also used as the name of an optional Image Pull Secret)"
        },
        "repository": {
          "type": "string",
          "description": "The name of the Docker Image image to run (without the Registry)"
        },
        "tag": {
          "type": "string",
          "description": "The tag of the Docker Image to run (also used for app.kubernetes.io/version label)"
        },
        "pullPolicy": {
          "type": "string",
          "enum": ["Never", "IfNotPresent", "Always"],
          "default": "IfNotPresent",
          "description": "Set to Always to try to pull new versions of the Docker Image"
        },
        "pullSecret": {
          "type": "string",
          "description": "Name of the Kubernetes Secret providing credentials for pulling the Image"
        }
      },
      "required": [
        "repository",
        "tag"
      ]
    },
    "securityContext": {
      "type": "object",
      "description": "Security context",
      "properties": {
        "pod": {
          "type": "object",
          "description": "Security context to use for the pod",
          "properties": {
            "runAsUser": {"type": "integer"},
            "runAsGroup": {"type": "integer"},
            "fsGroup": {"type": "integer"}
          }
        },
        "container": {
          "type": "object",
          "description": "Security context to use for running containers",
          "properties": {
            "allowPrivilegeEscalation": {"type": "boolean"},
            "readOnlyRootFilesystem": {"type": "boolean"}
          }
        }
      }
    },
    "command": {
      "type": "array",
      "items": {"type": "string"},
      "description": "Overrides the command to launch in the Docker Image"
    },
    "args": {
      "type": "array",
      "items": {"type": "string"},
      "description": "The command-line arguments passed to the service"
    },
    "env": {
      "type": "object",
      "additionalProperties": {"type": "string"},
      "description": "Environment variables passed to the service as a key-value map"
    },
    "envFrom": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "fieldRef": {"type": "object"},
          "resourceFieldRef": {"type": "object"},
          "configMapKeyRef": {"type": "object"},
          "secretKeyRef": {"type": "object"}
        }
      },
      "description": "Environment variables passed to the service from other sources (e.g., secretKeyRef)"
    },
    "config": {
      "type": "object",
      "description": "YAML/JSON configuration to be mounted as a file in the container"
    },
    "configMountPath": {
      "type": "string",
      "default": "/config/config.yaml",
      "description": "The file path in the container to mount the data from config into (exposed via $CONFIG_FILE)"
    },
    "additionalConfigs": {
      "type": "array",
      "items": {"type": "string"},
      "description": "Additional ConfigMaps with key named data.yaml to be mounted (paths appended to $CONFIG_FILE)"
    },
    "startupProbe": {
      "type": "object",
      "description": "Probe that waits for the service to initially start",
      "properties": {
        "initialDelaySeconds": {"type": "integer"},
        "periodSeconds": {"type": "integer"},
        "httpGet": {
          "type": "object",
          "properties": {
            "port": {"type": "string"},
            "path": {"type": "string"}
          }
        },
        "exec": {
          "type": "object",
          "properties": {
            "command": {
              "type": "array",
              "items": {"type": "string"}
            }
          }
        }
      }
    },
    "livenessProbe": {
      "type": "object",
      "description": "Probe that causes the service to be restarted when failing",
      "properties": {
        "initialDelaySeconds": {"type": "integer"},
        "periodSeconds": {"type": "integer"},
        "httpGet": {
          "type": "object",
          "properties": {
            "port": {"type": "string"},
            "path": {"type": "string"}
          }
        },
        "exec": {
          "type": "object",
          "properties": {
            "command": {
              "type": "array",
              "items": {"type": "string"}
            }
          }
        }
      }
    },
    "readinessProbe": {
      "type": "object",
      "description": "Probe that prevents the service from receiving traffic when failing",
      "properties": {
        "initialDelaySeconds": {"type": "integer"},
        "periodSeconds": {"type": "integer"},
        "httpGet": {
          "type": "object",
          "properties": {
            "port": {"type": "string"},
            "path": {"type": "string"}
          }
        },
        "exec": {
          "type": "object",
          "properties": {
            "command": {
              "type": "array",
              "items": {"type": "string"}
            }
          }
        }
      }
    },
    "maxShutdownSeconds": {
      "type": "integer",
      "default": 30,
      "description": "The number of seconds the pod has to shutdown before it is terminated"
    },
    "labels": {
      "type": "object",
      "additionalProperties": {"type": "string"},
      "description": "Additional labels to set on all generated resources"
    },
    "annotations": {
      "type": "object",
      "additionalProperties": {"type": "string"},
      "description": "Additional annotations to set on the Pod controller and Pods"
    },
    "resources": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "object",
          "properties": {
            "memory": {
              "type": "string",
              "default": "64M",
              "description": "The amount of memory requested for the service (recommendation: slightly higher than average usage)"
            },
            "cpu": {
              "type": "string",
              "default": "10m",
              "description": "The number of CPU cores requested for the service"
            }
          }
        },
        "limits": {
          "type": "object",
          "properties": {
            "memory": {
              "type": "string",
              "default": "96Mi",
              "description": "The maximum amount of memory the service may use (recommendation: slightly higher than worst-case usage)"
            },
            "cpu": {
              "type": "string",
              "default": "2000m",
              "description": "The maximum number of CPU cores the service may use"
            }
          }
        }
      }
    },
    "rollout": {
      "type": "object",
      "properties": {
        "controller": {
          "type": "string",
          "enum": ["Deployment", "StatefulSet", "DaemonSet", "ArgoRollout"],
          "default": "Deployment",
          "description": "The type of Pod controller to create"
        },
        "strategy": {
          "type": "string",
          "enum": ["RollingUpdate", "Recreate", "OnDelete", "Canary", "BlueGreen"],
          "default": "RollingUpdate",
          "description": "The rollout strategy"
        },
        "autoPromotion": {
          "type": "boolean",
          "default": true,
          "description": "Automatically promote successful rollouts (only applicable if rollout.strategy is BlueGreen)"
        },
        "flagger": {
          "type": "boolean",
          "default": false,
          "description": "Use Flagger to control rollouts (rollout.controller must be Deployment or StatefulSet)"
        },
        "analysis": {
          "description": "Flagger or Argo Rollouts analysis for automatic Canary or BlueGreen promotion"
        }
      }
    },
    "replicas": {
      "type": "integer",
      "default": 1,
      "description": "The number of instances of the service to run (set at least 2 for Pod Disruption Budget)"
    },
    "autoscaling": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables automatic starting of additional instances based on CPU load"
        },
        "maxReplicas": {
          "type": "integer",
          "default": 3,
          "description": "The maximum number of instances to run (must be larger than replicas)"
        },
        "metric": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["Resource", "Pods", "Object", "External"],
              "default": "Resource",
              "description": "The type of metric to use for scaling"
            },
            "name": {
              "type": "string",
              "default": "cpu",
              "description": "The name of the metric to use for scaling"
            },
            "object": {
              "type": ["object", "null"],
              "properties": {
                "apiVersion": {"type": "string"},
                "kind": {"type": "string"},
                "name": {"type": "string"}
              },
              "required": ["apiVersion", "kind", "name"],
              "description": "Reference to the Kubernetes object the metric describes (required if type = Object)"
            },
            "selector": {
              "type": "object",
              "additionalProperties": {"type": "string"},
              "description": "Labels for selecting the metric"
            }
          }
        },
        "targetValue": {
          "type": "integer",
          "default": 80,
          "description": "The desired value of the metric to achieve through scaling (e.g., CPU utilization in percent)"
        },
        "behavior": {
          "type": "object",
          "description": "Scaling behavior configuration (see HorizontalPodAutoscalerBehavior)"
        }
      }
    },
    "nodeSelector": {
      "type": "object",
      "additionalProperties": {"type": "string"},
      "description": "Node labels required for scheduling this service, also used as tolerations"
    },
    "persistence": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables persistent storage for the service"
        },
        "storageClass": {
          "type": "string",
          "description": "The type of disk to use for storage instead of the cluster default"
        },
        "accessModes": {
          "type": "array",
          "default": ["ReadWriteOnce"],
          "items": {"type": "string"},
          "description": "The support access modes the volume can be mounted with"
        },
        "size": {
          "type": "string",
          "default": "1G",
          "description": "The size of the persistent volume to create for the service"
        },
        "mountPath": {
          "type": "string",
          "description": "The mount path for the storage inside the container"
        }
      }
    },
    "secrets": {
      "type": "object",
      "additionalProperties":
      {
        "type": "object",
        "properties": {
          "mountPath": {
            "type": "string",
            "description": "The mount path for the Secret inside the container"
          },
          "subPath": {
            "type": "string",
            "description": "The path of a single file in the Secret to mount; leave empty to mount all files"
          },
          "files": {
            "type": "object",
            "additionalProperties": {"type": "string"},
            "description": "Map of file names to base64-encoded content; leave empty to reference existing Secret"
          }
        },
        "required": [
          "mountPath"
        ]
      }
    },
    "additionalMounts": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the volume"
          }
        },
        "required": ["name"],
        "additionalProperties": true
      },
      "description": "A map of mount paths inside the container to volumes"
    },
    "ingress": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables ingress into the service (either cluster-internal or public)"
        },
        "port": {
          "type": "integer",
          "default": 80,
          "description": "The container port ingress traffic is routed to"
        },
        "protocol": {
          "type": "string",
          "default": "http",
          "enum": ["http", "https", "grpc", "grpcs"],
          "description": "The internal protocol used for ingress"
        },
        "domains": {
          "type": "array",
          "items": {"type": "string"},
          "description": "The public domain names under which the service is exposed (leave empty for cluster-internal only)"
        },
        "paths": {
          "type": "array",
          "items": {"type": "string"},
          "description": "HTTP path prefixes to accept ingress traffic for (leave empty to accept traffic for any path)"
        },
        "tls": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false,
              "description": "Enables TLS termination at the ingress (not applicable if ingress.istio.enabled)"
            },
            "secret": {
              "type": "string",
              "description": "The name of the Secret holding the TLS private key (not applicable if ingress.istio.enabled)"
            }
          }
        },
        "cors": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false,
              "description": "Enables CORS (only applicable if ingress.class is 'nginx' or ingress.istio.enabled is true)"
            },
            "allowOrigins": {
              "type": "array",
              "items": {"type": "string"},
              "description": "List of origins allowed to access the ingress via CORS; leave empty to allow any"
            },
            "allowMethods": {
              "type": "array",
              "items": {"type": "string"},
              "default": ["GET"],
              "description": "List of HTTP methods allowed to access the ingress via CORS"
            },
            "allowHeaders": {
              "type": "array",
              "items": {"type": "string"},
              "default": ["Content-Type"],
              "description": "List of HTTP headers that can be used when requesting the ingress via CORS"
            },
            "allowCredentials": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials"
            },
            "exposeHeaders": {
              "type": "array",
              "items": {"type": "string"},
              "description": "List of HTTP headers that the browsers are allowed to access"
            }
          }
        },
        "class": {
          "type": "string",
          "description": "The ingress controller to use (not applicable if ingress.istio.enabled)"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {"type": "string"},
          "description": "Annotations for Ingress resource (not applicable if ingress.istio.enabled)"
        },
        "headless": {
          "type": "boolean",
          "default": false,
          "description": "Creates a headless Service to disable Kubernetes-based load balancing"
        },
        "additionalSelectors": {
          "type": "object",
          "additionalProperties": {"type": "string"},
          "description": "Additional label selectors used to restrict the Pods selected by the Service."
        },
        "istio": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": false,
              "description": "Use Istio VirtualService instead of Kubernetes Ingress resource"
            },
            "gateways": {
              "type": "array",
              "items": {"type": "string"},
              "description": "The names of the Istio Gateways to use"
            },
            "httpHeaders": {
              "type": "object",
              "additionalProperties": {"type": "string"},
              "description": "Custom HTTP response headers"
            },
            "timeout": {
              "type": "string",
              "default": "15s",
              "description": "Istio timeout (see https://istio.io/docs/tasks/traffic-management/request-timeouts/)"
            },
            "retries": {
              "type": "object",
              "description": "Istio retry policy (see https://istio.io/docs/reference/config/networking/virtual-service/#HTTPRetry)"
            }
          }
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "port": {
                "type": "integer",
                "description": "The container port ingress traffic is routed to"
              },
              "protocol": {
                "type": "string",
                "default": "http",
                "description": "The protocol used for the port (e.g., http or grpc)"
              },
              "domains": {
                "type": "array",
                "items": {"type": "string"},
                "description": "The public domain names under which the port is exposed (leave empty for cluster-internal only)"
              },
              "paths": {
                "type": "array",
                "items": {"type": "string"},
                "description": "HTTP path prefixes to accept ingress traffic for (leave empty to accept traffic for any path)"
              },
              "tls": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enables TLS termination at the ingress"
                  },
                  "secret": {
                    "type": "string",
                    "description": "The name of the Secret holding the TLS private key"
                  }
                }
              },
              "annotations": {
                "type": "object",
                "additionalProperties": {"type": "string"},
                "description": "Additional annotations, merged with ingress.annotations (use string 'nil' to unset existing values)"
              }
            },
            "required": ["port"]
          },
          "description": "Additional container ports ingress traffic is routed to (not applicable if `ingress.istio.enabled`)"
        }
      }
    },
    "netpol": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Apply network policies for the Pods"
        },
        "ingress": {
          "type": "array",
          "items": {"type": "object"},
          "description": "Ingress network policy rules to apply"
        },
        "egress": {
          "type": "array",
          "items": {"type": "object"},
          "description": "Ingress network policy rules to apply"
        }
      }
    },
    "tracing": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enables tracing with Jaeger agent (injected as sidecar)"
        },
        "probability": {
          "type": "number",
          "default": 1,
          "minimum": 0,
          "maximum": 1,
          "description": "Probability of any single trace being sampled; can be overridden for incoming requests e.g. via Istio"
        },
        "class": {
          "type": "string",
          "default": "true",
          "description": "Custom value to set for tracing sidecar injection annotations"
        }
      }
    },
    "monitoring": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Use Prometheus for monitoring / metrics scraping"
        },
        "port": {
          "type": "integer",
          "default": 9100,
          "description": "The port to be scraped for monitoring data"
        },
        "path": {
          "type": "string",
          "default": "/metrics",
          "description": "The path to be scraped for monitoring data"
        },
        "interval": {
          "type": "string",
          "default": "1m",
          "description": "The interval at which monitoring data is scraped"
        }
      }
    },
    "alerting": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false,
          "description": "Deploys Prometheus alert rule for issues like like unavailable pods or high memory use"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {"type": "string"},
          "description": "Additional labels to apply to alert rules"
        },
        "memory": {
          "type": "object",
          "properties": {
            "maxUsageFactor": {
              "type": "number",
              "default": "0.9",
              "minimum": 0,
              "maximum": 1,
              "description": "The maximum usage factor of the memory limit"
            }
          }
        },
        "http": {
          "type": "object",
          "properties": {
            "sampleInterval": {
              "type": "string",
              "default": "20m",
              "description": "The time interval in which to measure HTTP responses for triggering alerts"
            },
            "referenceInterval": {
              "type": "string",
              "default": "1w",
              "description": "The time interval to to compare with the sample interval to detect changes"
            },
            "maxSlowdown": {
              "type": "number",
              "default": "2.5",
              "description": "The maximum HTTP response slowdown in the sample interval compared to the reference interval"
            },
            "max4xxRatio": {
              "type": "number",
              "default": "2.5",
              "description": "The maximum HTTP 4xx ratio increase in the sample interval compared to the reference interval"
            },
            "max5xxCount": {
              "type": "number",
              "default": "0",
              "description": "The maximum number of HTTP 5xx responses in the sample interval"
            }
          }
        },
        "grpc": {
          "type": "object",
          "properties": {
            "requestsMetric": {
              "type": "string",
              "default": "grpc_server_handled_total",
              "description": "The name of the Prometheus metric counting gRPC requests"
            },
            "sampleInterval": {
              "type": "string",
              "default": "15m",
              "description": "The time interval in which to measure gRPC responses for triggering alerts"
            },
            "referenceInterval": {
              "type": "string",
              "default": "1w",
              "description": "The time interval to to compare with the sample interval to detect changes"
            },
            "maxErrorRatio": {
              "type": "number",
              "default": "2.5",
              "description": "The maximum gRPC error ratio increase in the sample interval compared to the reference interval"
            },
            "maxCriticalErrors": {
              "type": "integer",
              "default": "0",
              "description": "The maximum number of critical gRPC errors responses in the sample interval"
            },
            "criticalStatusCodes": {
              "type": "array",
              "items": {"type": "string"},
              "default": ["Internal", "Unimplemented"],
              "description": "Which gRPC status codes are considered critical errors"
            }
          }
        }
      }
    },
    "sidecars": {
      "type": "array",
      "items": {"type": "object"},
      "description": "Additional sidecar containers to be added to the Pod"
    },
    "rbac": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Namespace-specific Kubernetes RBAC Roles to assign to the service"
        },
        "clusterRoles": {
          "type": "array",
          "items": {"type": "string"},
          "description": "Cluster-wide Kubernetes RBAC Roles to assign to the service"
        }
      }
    },
    "global": {
      "type": "object",
      "properties": {
        "grafana": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL of a Grafana instance with access to the service's metrics"
            },
            "dashboard": {
              "type": "string",
              "default": "qqsCbY5Zz",
              "description": "The UID of the Grafana dashboard visualizing the service's metrics"
            }
          }
        }
      }
    }
  },
  "required": [
    "image"
  ]
}
